# **what?**
# This workflow runs all integration tests for supported OS
# and python versions and core adapters. If triggered by PR,
# the workflow will only run tests for adapters related
# to code changes. Use the `test all` and `test ${adapter}`
# label to run all or additional tests. Use `ok to test`
# label to mark PRs from forked repositories that are safe
# to run integration tests for. Requires secrets to run
# against different warehouses.

# **why?**
# This checks the functionality of dbt from a user's perspective
# and attempts to catch functional regressions.

# **when?**
# This workflow will run on every push to a protected branch
# and when manually triggered. It will also run for all PRs, including
# PRs from forks. The workflow will be skipped until there is a label
# to mark the PR as safe to run.

name: Integration Tests

on:
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  pull_request_target:
    branches-ignore:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  workflow_dispatch:

permissions: read-all

concurrency:
  group: integration-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      has-postgres-changes: ${{ steps.check-changes.outputs.postgres == 'true' }}
      has-snowflake-changes: ${{ steps.check-changes.outputs.snowflake == 'true' }}
      has-bigquery-changes: ${{ steps.check-changes.outputs.bigquery == 'true' }}
      has-redshift-changes: ${{ steps.check-changes.outputs.redshift == 'true' }}
    steps:
      - name: Check out the repository (non-PR)
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Check out the repository (PR)
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check if relevant files changed
        # https://github.com/marketplace/actions/paths-changes-filter
        uses: dorny/paths-filter@v2
        id: check-changes
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            postgres:
              - 'core/**'
              - 'plugins/postgres/**'
            snowflake:
              - 'core/**'
              - 'plugins/snowflake/**'
            bigquery:
              - 'core/**'
              - 'plugins/bigquery/**'
            redshift:
              - 'core/**'
              - 'plugins/redshift/**'
              - 'plugins/postgres/**'

  test:
    name: ${{ matrix.adapter }} ${{ matrix.python-version }} / ${{ matrix.os }}
    # run if not a pull request or has a label to mark as safe to test
    if: >-
      github.event_name != 'pull_request_target' ||
      contains(github.event.pull_request.labels.*.name, 'ok to test')
    runs-on: ${{ matrix.os }}
    needs: pre-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        adapter: [postgres, snowflake, redshift, bigquery]
        python-version: [3.6, 3.7, 3.8, 3.9] # TODO: only run python 3.8 on PRs

    env:
      TOXENV: integration-${{ matrix.adapter }}
      PYTEST_ADDOPTS: "-v --color=yes -nauto"

    steps:
      - name: Check out the repository
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Check out the repository (PR)
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up postgres (linux)
        if: |
          matrix.adapter == 'postgres' &&
          runner.os == 'Linux'
        uses: ./.github/actions/setup-postgres-linux

      - name: Set up postgres (macos)
        if: |
          matrix.adapter == 'postgres' &&
          runner.os == 'macOS'
        uses: ./.github/actions/setup-postgres-macos

      - name: Set up postgres (windows)
        if: |
          matrix.adapter == 'postgres' &&
          runner.os == 'Windows'
        uses: ./.github/actions/setup-postgres-windows

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip --version

      - name: Install tox
        run: |
          pip install tox
          tox --version

      - name: Run tox (postgres)
        # run if postgres integration tests
        # and is not a PR or has relevant changes/specified label
        if: >-
          matrix.adapter == 'postgres' &&
          (
            github.event_name != 'pull_request_target' ||
            needs.pre-checks.outputs.has-postgres-changes ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test postgres')
          )
        run: tox

      - name: Run tox (redshift)
        # run if redshift integration tests
        # and is not a PR or has relevant changes/specified label
        if: >-
          matrix.adapter == 'redshift' &&
          (
            github.event_name != 'pull_request_target' ||
            needs.pre-checks.outputs.has-redshift-changes ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test redshift')
          )
        env:
          REDSHIFT_TEST_DBNAME: ${{ secrets.REDSHIFT_TEST_DBNAME }}
          REDSHIFT_TEST_PASS: ${{ secrets.REDSHIFT_TEST_PASS }}
          REDSHIFT_TEST_USER: ${{ secrets.REDSHIFT_TEST_USER }}
          REDSHIFT_TEST_PORT: ${{ secrets.REDSHIFT_TEST_PORT }}
          REDSHIFT_TEST_HOST: ${{ secrets.REDSHIFT_TEST_HOST }}
        run: tox

      - name: Run tox (snowflake)
        # run if snowflake integration tests
        # and is not a PR or has relevant changes/specified label
        if: >-
          matrix.adapter == 'snowflake' &&
          (
            github.event_name != 'pull_request_target' ||
            needs.pre-checks.outputs.has-snowflake-changes ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test snowflake')
          )
        env:
          SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.SNOWFLAKE_TEST_ACCOUNT }}
          SNOWFLAKE_TEST_PASSWORD: ${{ secrets.SNOWFLAKE_TEST_PASSWORD }}
          SNOWFLAKE_TEST_USER: ${{ secrets.SNOWFLAKE_TEST_USER }}
          SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_WAREHOUSE }}
          SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN: ${{ secrets.SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_ID: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_ID }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET }}
          SNOWFLAKE_TEST_ALT_DATABASE: ${{ secrets.SNOWFLAKE_TEST_ALT_DATABASE }}
          SNOWFLAKE_TEST_ALT_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_ALT_WAREHOUSE }}
          SNOWFLAKE_TEST_DATABASE: ${{ secrets.SNOWFLAKE_TEST_DATABASE }}
          SNOWFLAKE_TEST_QUOTED_DATABASE: ${{ secrets.SNOWFLAKE_TEST_QUOTED_DATABASE }}
          SNOWFLAKE_TEST_ROLE: ${{ secrets.SNOWFLAKE_TEST_ROLE }}
        run: tox

      - name: Run tox (bigquery)
        # run if bigquery integration tests
        # and is not a PR or has relevant changes/specified label
        if: >-
          matrix.adapter == 'bigquery' &&
          (
            github.event_name != 'pull_request_target' ||
            needs.pre-checks.outputs.has-bigquery-changes ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test bigquery')
          )
        env:
          BIGQUERY_TEST_SERVICE_ACCOUNT_JSON: ${{ secrets.BIGQUERY_TEST_SERVICE_ACCOUNT_JSON }}
          BIGQUERY_TEST_ALT_DATABASE: ${{ secrets.BIGQUERY_TEST_ALT_DATABASE }}
        run: tox

  post-checks:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      pull-requests: write
    steps:
      - name: Needs permission PR comment
        if: >-
          github.event_name == 'pull_request_target' &&
          needs.test.result == 'skipped' &&
          github.event.pull_request.head.repo.full_name != github.repository
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: |
            "You do not have permissions to run integration tests, @dbt-labs/core "\
            "needs to label this PR with `ok to test` in order to run integration tests!"
          check_for_duplicate_msg: true
