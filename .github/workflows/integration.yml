# **what?** - This workflow runs all integration tests for supported OS
# and python versions and core adapters. Requires secrets to run against
# different warehouses. This is a trusted workflow.
# **why?** - This checks the functionality of dbt from a user's perspective,
# provides code coverage, and attempts to catch functional regressions.
# **when?** - This workflow will run on every push to a protected branch
# and when manually triggered.

name: Integration Tests

on:
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  workflow_dispatch:

concurrency:
  group: integration-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: ${{ matrix.adapter }} ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        adapter: [postgres, snowflake, redshift, bigquery]
        python-version: [3.6, 3.7, 3.8, 3.9]

    env:
      TOXENV: integration-${{ matrix.adapter }}
      PYTEST_ADDOPTS: "-v --color=yes -n4"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up postgres (ubuntu)
        if: |
          matrix.adapter == 'postgres' &&
          runner.os == 'Linux'
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres bash test/setup_db.sh

      - name: Set up postgres (macos)
        if: |
          matrix.adapter == 'postgres' &&
          runner.os == 'macOS'
        run: |
          brew services start postgresql
          echo "Check PostgreSQL service is running"
          i=10
          COMMAND='pg_isready'
          while [ $i -gt 0 ]; do
              echo "Check PostgreSQL service status"
              eval $COMMAND && break
              ((i--))
              if [ $i == 0 ]; then
                  echo "PostgreSQL service not ready, all attempts exhausted"
                  exit 1
              fi
              echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
              sleep 10
          done
          createuser -s postgres
          bash test/setup_db.sh

      - name: Set up postgres (windows)
        if: |
          matrix.adapter == 'postgres' &&
          runner.os == 'Windows'
        run: |
          $pgService = Get-Service -Name postgresql*
          Set-Service -InputObject $pgService -Status running -StartupType automatic
          Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
          $env:Path += ";$env:PGBIN"
          bash test/setup_db.sh

      - name: Upgrade pip
        run: |
          pip install --upgrade pip
          pip --version

      - name: Install tox
        run: |
          pip install tox

      - name: Run tox (postgres)
        if: matrix.adapter == 'postgres'
        run: tox

      - name: Run tox (redshift)
        if: matrix.adapter == 'redshift'
        env:
          REDSHIFT_TEST_DBNAME: ${{ secrets.REDSHIFT_TEST_DBNAME }}
          REDSHIFT_TEST_PASS: ${{ secrets.REDSHIFT_TEST_PASS }}
          REDSHIFT_TEST_USER: ${{ secrets.REDSHIFT_TEST_USER }}
          REDSHIFT_TEST_PORT: ${{ secrets.REDSHIFT_TEST_PORT }}
          REDSHIFT_TEST_HOST: ${{ secrets.REDSHIFT_TEST_HOST }}
        run: tox

      - name: Run tox (snowflake)
        if: matrix.adapter == 'snowflake'
        env:
          SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.SNOWFLAKE_TEST_ACCOUNT }}
          SNOWFLAKE_TEST_PASSWORD: ${{ secrets.SNOWFLAKE_TEST_PASSWORD }}
          SNOWFLAKE_TEST_USER: ${{ secrets.SNOWFLAKE_TEST_USER }}
          SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_WAREHOUSE }}
          SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN: ${{ secrets.SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_ID: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_ID }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET }}
          SNOWFLAKE_TEST_ALT_DATABASE: ${{ secrets.SNOWFLAKE_TEST_ALT_DATABASE }}
          SNOWFLAKE_TEST_ALT_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_ALT_WAREHOUSE }}
          SNOWFLAKE_TEST_DATABASE: ${{ secrets.SNOWFLAKE_TEST_DATABASE }}
          SNOWFLAKE_TEST_QUOTED_DATABASE: ${{ secrets.SNOWFLAKE_TEST_QUOTED_DATABASE }}
          SNOWFLAKE_TEST_ROLE: ${{ secrets.SNOWFLAKE_TEST_ROLE }}
        run: tox

      - name: Run tox (bigquery)
        if: matrix.adapter == 'bigquery'
        env:
          BIGQUERY_TEST_SERVICE_ACCOUNT_JSON: ${{ secrets.BIGQUERY_TEST_SERVICE_ACCOUNT_JSON }}
          BIGQUERY_TEST_ALT_DATABASE: ${{ secrets.BIGQUERY_TEST_ALT_DATABASE }}
        run: tox
