# what? - This workflow runs integration tests for supported OS and python versions and core adapters.
# It will only run tests for related file changes. Supports a `test all` label and a `test ${adapter}`
# label to manually run all or other tests. Requires secrets to run against different warehouses.
# why? - This checks the functionality of dbt from a user's perspective, provides code coverage, and
# attempts to prevent functional regressions.
# when? - This workflow will run for all pull requests and forked pull requests. This workflow will run
# for pull requests, and will run for forked pull requests when the `ok to test` label is present.

name: Integration Tests (slim)

on:
  pull_request_target:

permissions: read-all

concurrency: 
  group: integration-slim-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.check-changes.outputs.changes }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Check if relevant files changed
        uses: dorny/paths-filter@v2
        id: check-changes
        with:
          filters: |
            postgres:
              - 'core/**'
              - 'plugins/postgres/**'
            snowflake:
              - 'core/**'
              - 'plugins/snowflake/**'
            bigquery:
              - 'core/**'
              - 'plugins/bigquery/**'
            redshift:
              - 'core/**'
              - 'plugins/redshift/**'
              - 'plugins/postgres/**'

  test:
    name: ${{ matrix.adapter }} ${{ matrix.python-version }} / ${{ matrix.os }}

    if: >-
      github.event.pull_request.head.repo.full_name == github.repository ||
      contains(github.event.pull_request.labels.*.name, 'ok to test')

    needs: pre-checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        adapter: [postgres, snowflake, redshift, bigquery]
        python-version: [3.8]
        tox-cmd: ["tox -- -v -color=yes -n4"]

    env:
      TOXENV: integration-${{ matrix.adapter }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up postgres (ubuntu)
        if: |
          matrix.adapter == 'postgres' &&
          runner.os == 'Linux'
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres bash test/setup_db.sh

      - name: Upgrade pip
        run: |
          pip install --upgrade pip
          pip --version

      - name: Install tox
        run: |
          pip install tox

      - name: Run tox (postgres)
        if: >-
          matrix.adapter == 'postgres' &&
          (
            contains(jobs.pre-checks.outputs.changes, 'postgres' ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test postgres')
          )
        run: ${{ matrix.tox-cmd }}

      - name: Run tox (redshift)
        if: >-
          matrix.adapter == 'redshift' &&
          (
            contains(jobs.pre-checks.outputs.changes, 'redshift' ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test redshift')
          )
        env:
          REDSHIFT_TEST_DBNAME: ${{ secrets.REDSHIFT_TEST_DBNAME }}
          REDSHIFT_TEST_PASS: ${{ secrets.REDSHIFT_TEST_PASS }}
          REDSHIFT_TEST_USER: ${{ secrets.REDSHIFT_TEST_USER }}
          REDSHIFT_TEST_PORT: ${{ secrets.REDSHIFT_TEST_PORT }}
          REDSHIFT_TEST_HOST: ${{ secrets.REDSHIFT_TEST_HOST }}
        run: ${{ matrix.tox-cmd }}

      - name: Run tox (snowflake)
        if: >-
          matrix.adapter == 'snowflake' &&
          (
            contains(jobs.pre-checks.outputs.changes, 'snowflake' ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test snowflake')
          )
        env:
          SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.SNOWFLAKE_TEST_ACCOUNT }}
          SNOWFLAKE_TEST_PASSWORD: ${{ secrets.SNOWFLAKE_TEST_PASSWORD }}
          SNOWFLAKE_TEST_USER: ${{ secrets.SNOWFLAKE_TEST_USER }}
          SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_WAREHOUSE }}
          SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN: ${{ secrets.SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_ID: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_ID }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET }}
          SNOWFLAKE_TEST_ALT_DATABASE: ${{ secrets.SNOWFLAKE_TEST_ALT_DATABASE }}
          SNOWFLAKE_TEST_ALT_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_ALT_WAREHOUSE }}
          SNOWFLAKE_TEST_DATABASE: ${{ secrets.SNOWFLAKE_TEST_DATABASE }}
          SNOWFLAKE_TEST_QUOTED_DATABASE: ${{ secrets.SNOWFLAKE_TEST_QUOTED_DATABASE }}
          SNOWFLAKE_TEST_ROLE: ${{ secrets.SNOWFLAKE_TEST_ROLE }}
        run: ${{ matrix.tox-cmd }}

      - name: Run tox (bigquery)
        if: >-
          matrix.adapter == 'bigquery' &&
          (
            contains(jobs.pre-checks.outputs.changes, 'bigquery' ||
            contains(github.event.pull_request.labels.*.name, 'test all') ||
            contains(github.event.pull_request.labels.*.name, 'test bigquery')
          )
        env:
          BIGQUERY_SERVICE_ACCOUNT_JSON: ${{ secrets.BIGQUERY_SERVICE_ACCOUNT_JSON }}
          BIGQUERY_TEST_ALT_DATABASE: ${{ secrets.BIGQUERY_TEST_ALT_DATABASE }}
        run: ${{ matrix.tox-cmd }}

  post-checks:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Needs permission PR comment
        if: >-
          needs.test.result == 'skipped' &&
          github.event_name == 'pull_request_target' &&
          github.event.pull_request.head.repo.full_name != github.repository

        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: |
            "You do not have permissions to run integration tests, @dbt-labs/core "\
            "needs to label this PR with `ok to test` in order to run integration tests!"
          check_for_duplicate_msg: true
